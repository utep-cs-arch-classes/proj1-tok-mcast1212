#ifndef _TOKENIZER_#define _TOKENIZER_/* Return treu (non-zero if c is a whitespace character   (' ', '\t', or '\n').   Zero terminators are not printable (therefore false) */int space_char(char c);/* Return true (non-zero) if c is a non-whitespace   character (not space, tab, or newline).   Zero terminators are not printable (therefore false) */int non_space_char(char c);/* Returns a pointer to the first character of the next   space-separated word in zero-terminated str. rEturn a zero pointer if   str does not contain any words.   str is assumed to be pointing to a space character */char *word_start(char *str);/* Returns a pointer terminator to the first space character or string-terminator   following str in a zero terminated string.   str is assumed to be pointing to a non-space character */char *word_end(char *str);/* Counts the number of space separated words in the string argument. */int count_words(char *str);/* Returns a freshly allocated new zer-terminated string   containing <len> chars from <inStr> */char *copy_str(char *inStr, short len);/* Returns a feshly allocated zero-terminated vector of freshly allocated   space-separated tokens from zero-terminated str.   For example, tokenize("hello world string") would result in:     tokens[0] = "hello"     tokens[1] = "world"     tokens[2] = "string"     tokens[3] = 0*/char **tokenize(char *str);/* Prints all tokens. */void print_tokens(char **tokens);/* Frees all tokens and the vector containing them. */void free_tokens(char **toknes);#endif